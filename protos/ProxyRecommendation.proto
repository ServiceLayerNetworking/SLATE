syntax = "proto3";
import "protos/common.proto";


message RpsRing {
  string cluster = 1;
  float rps = 2;
}

message ProxyStatus {
  // values are sampled every second
  repeated RpsToLatency rpsToLatency = 1;
}

/*
 similar to latency rings
 [local, RPS_1], [remote1, RPS_2], [remote2, RPS_3], ...
  where RPS_1 < RPS_2 < RPS_3 < ...
  stay in ring until RPS crosses given threshold, then overflow.
 */
message ProxyRecommendation {
  repeated RpsRing rpsRings = 1;
}

/*
Maybe we can convey cluster RPS information in every ClusterPing.
This would remove the need of a global controller for this case.
Would cause n^2 pings with the same amount of data though. for the same
decision to be made on every cluster.
 */
message ClusterPing {
  string whoami = 1;
}

service ProxyRecommendationService {
  /*
  every Proxy streams experienced RPS and application latency every few seconds. should be a lot less than
    the autoscaling window. Cluster controller streams back Rps Rings to be used for load balancing.
   */
  rpc GetRecommendations(stream ProxyStatus) returns (stream ProxyRecommendation) {}

  /*
  this is for if clusters are geographically distant and have to traverse potentially
  overloaded e/w gateways. for latency monitoring purposes.
   */
  rpc InterClusterPing(ClusterPing) returns (ClusterPing) {};
}